"Visibility", "Wind Speed", "Wind Direction",
"Sunrise", "Sunset")
weather_df[11,2] <- as.POSIXct(as.numeric(x[11,2]), origin="1970-01-01")
weather_df[12,2] <- as.POSIXct(as.numeric(x[12,2]), origin="1970-01-01")
gt(weather_df)
}
current_weather()
current_weather <- function(city = "Amsterdam", country = "NL"){
coordinates <- geocoding(city, country)
#api url
base <- "https://api.openweathermap.org/data/2.5/weather?lat="
weather_url_1 <- "&lon="
weather_url_2 <- "&appid="
appid <- '03782ca206139ca19d564d33c2813127'
weather_url_3 <- "&units=metric"
weather_url <- paste0(base, coordinates[1,3], weather_url_1,
coordinates[1,4], weather_url_2, appid, weather_url_3)
#get api data
weather_raw <- GET(weather_url)
weather_char <- rawToChar(weather_raw$content)
weather_dat <- fromJSON(weather_char)
weather_dat[[2]][[3]]
#transform api data
weather_df <- as.data.frame(unlist(weather_dat))
weather_df$Component <- rownames(weather_df)
weather_df <- weather_df[, c(2,1)]
rownames(weather_df) <- seq(1:nrow(weather_df))
colnames(weather_df) <- c("Component", "Data")
weather_df <- weather_df[c(5, 8:16, 22:23),]
weather_df$Component <- c("Current Weather", "Current Temperature",
"Feels Like Temperature", "Min Temperature",
"Max Temperature", "Air Pressure", "Humidity",
"Visibility", "Wind Speed", "Wind Direction",
"Sunrise", "Sunset")
weather_df[11,2] <- as.POSIXct(as.numeric(x[11,2]), origin="1970-01-01")
weather_df[12,2] <- as.POSIXct(as.numeric(x[12,2]), origin="1970-01-01")
weather_df
}
current_weather()
weather_df[11,2] <- as.POSIXct(as.numeric(x[11,2]), origin="1970-01-01")
View(x)
current_weather <- function(city = "Amsterdam", country = "NL"){
coordinates <- geocoding(city, country)
#api url
base <- "https://api.openweathermap.org/data/2.5/weather?lat="
weather_url_1 <- "&lon="
weather_url_2 <- "&appid="
appid <- '03782ca206139ca19d564d33c2813127'
weather_url_3 <- "&units=metric"
weather_url <- paste0(base, coordinates[1,3], weather_url_1,
coordinates[1,4], weather_url_2, appid, weather_url_3)
#get api data
weather_raw <- GET(weather_url)
weather_char <- rawToChar(weather_raw$content)
weather_dat <- fromJSON(weather_char)
weather_dat[[2]][[3]]
#transform api data
weather_df <- as.data.frame(unlist(weather_dat))
weather_df$Component <- rownames(weather_df)
weather_df <- weather_df[, c(2,1)]
rownames(weather_df) <- seq(1:nrow(weather_df))
colnames(weather_df) <- c("Component", "Data")
weather_df <- weather_df[c(5, 8:16, 22:23),]
weather_df$Component <- c("Current Weather", "Current Temperature",
"Feels Like Temperature", "Min Temperature",
"Max Temperature", "Air Pressure", "Humidity",
"Visibility", "Wind Speed", "Wind Direction",
"Sunrise", "Sunset")
weather_df[11,2] <- as.POSIXct(as.numeric(weather_df[11,2]), origin="1970-01-01")
weather_df[12,2] <- as.POSIXct(as.numeric(weather_df[12,2]), origin="1970-01-01")
gt(weather_df)
}
current_weather()
current_weather()
library(airquality)
airquality::current_weather()
current_weather <- function(city = "Amsterdam", country = "NL"){
coordinates <- geocoding(city, country)
#api url
base <- "https://api.openweathermap.org/data/2.5/weather?lat="
weather_url_1 <- "&lon="
weather_url_2 <- "&appid="
appid <- '03782ca206139ca19d564d33c2813127'
weather_url_3 <- "&units=metric"
weather_url <- paste0(base, coordinates[1,3], weather_url_1,
coordinates[1,4], weather_url_2, appid, weather_url_3)
#get api data
weather_raw <- GET(weather_url)
weather_char <- rawToChar(weather_raw$content)
weather_dat <- fromJSON(weather_char)
weather_dat[[2]][[3]]
#transform api data
weather_df <- as.data.frame(unlist(weather_dat))
weather_df$Component <- rownames(weather_df)
weather_df <- weather_df[, c(2,1)]
rownames(weather_df) <- seq(1:nrow(weather_df))
colnames(weather_df) <- c("Component", "Data")
weather_df <- weather_df[c(5, 8:16, 22:23),]
weather_df$Component <- c("Current Weather", "Current Temperature",
"Feels Like Temperature", "Min Temperature",
"Max Temperature", "Air Pressure", "Humidity",
"Visibility", "Wind Speed", "Wind Direction",
"Sunrise", "Sunset")
weather_df[11,2] <- as.POSIXct(as.numeric(weather_df[11,2]), origin="1970-01-01")
weather_df[12,2] <- as.POSIXct(as.numeric(weather_df[12,2]), origin="1970-01-01")
gt(weather_df)
}
geocoding <- function(city = "Amsterdam", country = "NL"){
#api url
geocode_base <- 'http://api.openweathermap.org/geo/1.0/direct?q='
geocode_limit <- '&limit=1&appid='
geocode_appid <- '03782ca206139ca19d564d33c2813127'
geocode_url <- paste0(
geocode_base,
city,
",",
country,
geocode_limit,
geocode_appid
)
geocode_raw <- GET(geocode_url)
geocode_char <- rawToChar(geocode_raw$content)
geocode_dat <- fromJSON(geocode_char)
return(geocode_dat)
}
current_weather()
x <- current_weather()
x[11,2] <- as.POSIXct(as.numeric(x[11,2]), origin="1970-01-01")
View(x)
current_weather <- function(city = "Amsterdam", country = "NL"){
coordinates <- geocoding(city, country)
#api url
base <- "https://api.openweathermap.org/data/2.5/weather?lat="
weather_url_1 <- "&lon="
weather_url_2 <- "&appid="
appid <- '03782ca206139ca19d564d33c2813127'
weather_url_3 <- "&units=metric"
weather_url <- paste0(base, coordinates[1,3], weather_url_1,
coordinates[1,4], weather_url_2, appid, weather_url_3)
#get api data
weather_raw <- GET(weather_url)
weather_char <- rawToChar(weather_raw$content)
weather_dat <- fromJSON(weather_char)
weather_dat[[2]][[3]]
#transform api data
weather_df <- as.data.frame(unlist(weather_dat))
weather_df$Component <- rownames(weather_df)
weather_df <- weather_df[, c(2,1)]
rownames(weather_df) <- seq(1:nrow(weather_df))
colnames(weather_df) <- c("Component", "Data")
weather_df <- weather_df[c(5, 8:16, 22:23),]
weather_df$Component <- c("Current Weather", "Current Temperature",
"Feels Like Temperature", "Min Temperature",
"Max Temperature", "Air Pressure", "Humidity",
"Visibility", "Wind Speed", "Wind Direction",
"Sunrise", "Sunset")
weather_df[11,2] <- as.POSIXct(as.numeric(weather_df[11,2]), origin="1970-01-01")
weather_df[12,2] <- as.POSIXct(as.numeric(weather_df[12,2]), origin="1970-01-01")
weather_df
}
x <- current_weather()
x[11,2] <- as.POSIXct(as.numeric(x[11,2]), origin="1970-01-01")
View(x)
as.POSIXct(as.numeric(x[11,2]), origin="1970-01-01")
x[10,2] <- as.POSIXct(as.numeric(x[11,2]), origin="1970-01-01")
x[10,2] <- as.POSIXct(as.numeric(x[11,2]), origin="1970-01-01")
>
x[1,2] <- 1
x[1,2] <- "hi"
x[11,2] <- "hi"
x[11,2] <- as.POSIXct(as.numeric(x[11,2]), origin="1970-01-01")
x[12,2] <- as.POSIXct(as.numeric(x[12,2]), origin="1970-01-01")
x[12,2] <- 2
x <- current_weather()
library(lubridate)
x[11,2]
x[11,2]
x[11,2] <- as_datetime(x[11,2])
as_datetime(x[11,2])
x <- current_weather()
as_datetime(x[11,2])
?as_datetime
as_datetime(x[11,2], tz = "UTC")
as_datetime(x[11,2], origin = lubridate::origin, tz = "UTC")
as_datetime(x[11,2], tz = "UTC", format = NULL)
as_datetime(x[11,2], tz = "UTC", format = NULL)
mode(x[11,2])
as_date(x[11,2], tz = NULL, format = NULL)
as_date(x[11,2], tz = NULL, format = NULL)
library(tidyverse)
setwd("/Users/lucas/Documents/Master/UvA/Research Internship/Data Analysis")
data <- read.csv("creativity_neg_control_final_June+1%2C+2022_20.22.csv", header = TRUE, check.names = FALSE)
colnames(data)
new <- data %>%
select(`9_gender`,
timeOutLog, groupID,
StartDate, EndDate,
participantID, participantRole,
Progress, Finished,
`0_consent`, `1_prolific_id `,
`2_ac_1_rec`, `2_ac_2_rec`, `2_ac_3_rec`,
`2_ac_1_can`, `2_ac_2_can`, `2_ac_3_can`,
neg_chat,
`7_1_agree_quest`,
`7_1_agreement_bonus`,
`7_1_agreement_vacation_time`,
`7_1_agreement_moving_expenses`,
`7_1_agreement_insurance_coverage`,
`7_2_agree_quest`,
`7_2_agreement_bonus`,
`7_2_agreement_vacation_time`,
`7_2_agreement_moving_expenses`,
`7_2_agreement_insurance_coverage`,
svo_1:svo_6,
`8_em_1`:`8_em_18`,
`9_age`, `9_gender`, `9_email`
)
agree_check <- data %>%
filter(timeOutLog == "OK -- no issues") %>%
slice(-(1:3)) %>%
select(`9_gender`,
timeOutLog, groupID,
StartDate, EndDate,
participantID, participantRole,
Progress, Finished,
`0_consent`, `1_prolific_id `,
`2_ac_1_rec`, `2_ac_2_rec`, `2_ac_3_rec`,
`2_ac_1_can`, `2_ac_2_can`, `2_ac_3_can`,
neg_chat,
`7_1_agree_quest`,
`7_2_agree_quest`,
`7_1_agreement_bonus`,
`7_2_agreement_bonus`,
`7_1_agreement_vacation_time`,
`7_2_agreement_vacation_time`,
`7_1_agreement_moving_expenses`,
`7_2_agreement_moving_expenses`,
`7_1_agreement_insurance_coverage`,
`7_2_agreement_insurance_coverage`,
svo_1:svo_6,
`8_em_1`:`8_em_18`,
`9_age`, `9_gender`, `9_email`
)
View(new)
testthat::test_package()
testthat::test_package("airquality")
testthat::test_package("airquality")
testthat::test_that()
testthat::test_check()
library(airquality)
airquality::current_weather()
testthat::test_package()
testthat::test_package(airquality)
testthat::test_package("airquality")
testthat::test_package("test-airquality")
testthat::test_package(test-airquality)
library(airquality)
airquality::current_weather()
devtools::test()
library(airquality)
devtools::document()
devtools::document()
devtools::document()
devtools::test()
devtools::document()
library(airquality)
devtools::test()
devtools::test()
gt(current_aq_df(input$city_in, input$country_in))
output$current_aq_df <- render_gt({
gt(current_aq_df(input$city_in, input$country_in))
})
output$plot_aqi_hist <- renderPlot({
plot_aqi_hist(input$city_in, input$country_in)
})
output$plot_comp_hist <- renderPlotly({
plot_comp_hist(input$city_in, input$country_in, input$comp_in)
})
output$current_aq_table <- render_gt({
current_aq_table()
})
library(airquality)
devtools::document()
library(airquality)
output$current_weather <- render_gt({
current_weather(input$city_in, input$country_in)
})
output$aqi_map <- renderPlot({
aqi_map()
})
server <- function(input, output) {
output$current_aq_df <- render_gt({
gt(current_aq_df(input$city_in, input$country_in))
})
output$plot_aqi_hist <- renderPlot({
plot_aqi_hist(input$city_in, input$country_in)
})
output$plot_comp_hist <- renderPlotly({
plot_comp_hist(input$city_in, input$country_in, input$comp_in)
})
output$current_aq_table <- render_gt({
current_aq_table()
})
output$current_weather <- render_gt({
current_weather(input$city_in, input$country_in)
})
output$aqi_map <- renderPlot({
aqi_map()
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
#' @export
airquality_app <- function(){
ui <- fluidPage(
tabsetPanel(
tabPanel("Location",
textInput(inputId = "city_in",
label = "City",
width = 200
),
textInput(inputId = "country_in",
label = "Country",
width = 200
)
),
tabPanel("Current AQ",
gt_output(outputId = "current_aq_df")
),
tabPanel("AQI History",
plotOutput(outputId = "plot_aqi_hist",
width = 1200
)
),
tabPanel("AQ Subcomponent History",
selectInput(inputId = "comp_in",
label = "Subcomponent",
choices = c("co", "no", "no2", "o3",
"so2", "pm2_5", "pm10", "nh3" ),
width = 200),
plotlyOutput(outputId = "plot_comp_hist",
width = 1200)
),
tabPanel("Current AQI Europe",
gt_output(outputId = "current_aq_table")
),
tabPanel("Current Weather",
gt_output(outputId = "current_weather")
),
tabPanel("AQI Map",
plotOutput(outputId = "aqi_map",
width = "100%",
height = "800"
)
)
)
)
server <- function(input, output) {
output$current_aq_df <- render_gt({
gt(current_aq_df(input$city_in, input$country_in))
})
output$plot_aqi_hist <- renderPlot({
plot_aqi_hist(input$city_in, input$country_in)
})
output$plot_comp_hist <- renderPlotly({
plot_comp_hist(input$city_in, input$country_in, input$comp_in)
})
output$current_aq_table <- render_gt({
current_aq_table()
})
output$current_weather <- render_gt({
current_weather(input$city_in, input$country_in)
})
output$aqi_map <- renderPlot({
aqi_map()
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
}
library(shiny)
airquality::airquality_app()
devtools::document()
devtools::document()
library(airquality)
airquality::airquality_app()
devtools::document()
library(airquality)
airquality::airquality_app()
runApp('~/Documents/Master/UvA/Programming Next Step/shiny_app/airquality_shiny_testing.R')
airquality::geocoding()
cd <- geocoding()
View(cd)
geocoding("Amsterdam", "NL")
x <-geocoding("Amsterdam", "NL")
View(x)
x$lat
x$name
x$local_names
x$name
View(cd)
runApp('~/Documents/Master/UvA/Programming Next Step/shiny_app/airquality_shiny_testing.R')
city_from_api <- geocoding()
city_from_api$name
city_from_api <- geocoding("Berlin", "GER")
city_from_api$name
devtools::test()
devtools::test()
airquality::current_aq_df()
airquality::geocoding("NONSENSE", "NLLN")
airquality::geocoding("ddsfs", "NLLN")
airquality::geocoding("ddsfs", )
airquality::geocoding("ddsfs", )
airquality::geocoding()
airquality::geocoding("Ammsterdam", "NL")
airquality::current_aq_df("annnserdam", "NL")
airquality::current_aq_df("annnserdam", "NL")
?importFrom
devtools::document()
library(airquality)
typo <- geocoding("Ammsterdma", "NL")
View(x)
typo <- geocoding("Beerlin", "NL")
View(x)
typo <- geocoding("Beerlin", "NL")
geocoding("Berrlin", "GER")
geocoding("Beeerlin", "GER")
typo <- geocoding("Beerlin", "GER")
View(typo)
length(typo)
no_typo <- geocoding("berlin", "ger")
length(no_typo)
library(airquality)
airquality::plot_aqi_hist()
library(airquality)
airquality::geocoding("Ammsterdam", "NL")
airquality::geocoding("Beeerlin", "NL")
airquality::geocoding("Beeerlin", "GER")
geocoding()
x <- geocoding()
length(x)
x <- geocoding("Beeerlin", "GER")
length(x)
geocoding <- function(city = "Amsterdam", country = "NL"){
#api url
geocode_base <- 'http://api.openweathermap.org/geo/1.0/direct?q='
geocode_limit <- '&limit=1&appid='
geocode_appid <- '03782ca206139ca19d564d33c2813127'
geocode_url <- paste0(
geocode_base,
city,
",",
country,
geocode_limit,
geocode_appid
)
geocode_raw <- GET(geocode_url)
geocode_char <- rawToChar(geocode_raw$content)
geocode_dat <- fromJSON(geocode_char)
return(geocode_dat)
if(length(geocode_dat) == 0) {
warning("There is probably a typo in the city or country entered!")
}
}
geocoding("Ammsterda", "NL")
geocoding <- function(city = "Amsterdam", country = "NL"){
#api url
geocode_base <- 'http://api.openweathermap.org/geo/1.0/direct?q='
geocode_limit <- '&limit=1&appid='
geocode_appid <- '03782ca206139ca19d564d33c2813127'
geocode_url <- paste0(
geocode_base,
city,
",",
country,
geocode_limit,
geocode_appid
)
geocode_raw <- GET(geocode_url)
geocode_char <- rawToChar(geocode_raw$content)
geocode_dat <- fromJSON(geocode_char)
if(length(geocode_dat) == 0) {
warning("There is probably a typo in the city or country entered!")
}
return(geocode_dat)
}
geocoding("ammm", "nl")
library(airquality)
airquality::geocoding("msmsmd", "nl")
airquality::geocoding("msmsmd")
airquality::current_aq_df("smsmsm", "nl")
library(airquality)
airquality::current_aq_df()
airquality::geocoding("asd")
devtools::test()
devtools::test()
geocoding("Ammmmsterdam", "NL")
devtools::test()
devtools::test()
typo <- geocoding("Ammmsterdam", "nl")
devtools::test()
devtools::test()
geocoding("Ammmsterdam", "nl")
devtools::test()
library(airquality)
runApp('~/Documents/Master/UvA/Programming Next Step/shiny_app/airquality_shiny_testing.R')
runApp('~/Documents/Master/UvA/Programming Next Step/shiny_app/airquality_shiny_testing.R')
?aqi_map
runApp('~/Documents/Master/UvA/Programming Next Step/shiny_app/airquality_shiny_testing.R')
icon("home")
runApp('~/Documents/Master/UvA/Programming Next Step/shiny_app/airquality_shiny_testing.R')
runApp('~/Documents/Master/UvA/Programming Next Step/shiny_app/airquality_shiny_testing.R')

cat("NOTE: Monte Carlo confidence intervals not available for this model. \n")
cat("      Bootstrapping is used instead.\n")}
if (notecode[i,1]==16)
{cat(" \n")
cat("NOTE: The number of Monte Carlo samples was adjusted upward given your desired confidence. \n")}
if (notecode[i,1]==19)
{cat(" \n")
cat("NOTE: Your contrast matrix is invalid or not applicable to this model. \n")}
if (notecode[i,1]==20)
{cat(" \n")
cat("NOTE: One of the groups specified by your contrast matrix does not exist in the data. \n")}
if (notecode[i,1]==24)
{cat(" \n")
cat("NOTE: Total effect model not available with dichotomous Y. \n")}
if (notecode[i,1]==25)
{cat(" \n")
cat("NOTE: STAND/EFFSIZE options not available with dichotomous Y. \n")}
if (notecode[i,1]==27)
{cat(" \n")
cat("NOTE: Standardized coefficients not available for models with moderators. \n")}
if (notecode[i,1]==28)
{cat(" \n")
cat("NOTE: The contrast option is not available with a multicategorical X. \n")}
}
if (nmiss > 0)
{cat(" \n")
cat("NOTE: Some cases with missing data were deleted. The number of deleted cases was: ")
write.table(nmiss,quote=FALSE,row.names=FALSE,col.names=FALSE)}
}
# print errors
for (i in c(1:100))
{
if (errcode[i,1]==1)
{cat(" \n")
cat("ERROR: You must specify a Y and an X variable. \n")}
if (errcode[i,1]==2)
{cat(" \n")
cat("ERROR: X, M, or Y variable used more than once or W and Z are the same variable. \n")}
if (errcode[i,1]==3)
{cat(" \n")
cat("ERROR: You have specified more than one variable for W, Y, X, or Z. \n")}
if (errcode[i,1]==4)
{cat(" \n")
cat("ERROR: A variable specified as multicategorical has more than nine categories. \n")}
if (errcode[i,1]==5)
{cat(" \n")
cat("ERROR: One of the categories contains only a single case. \n")}
if (errcode[i,1]==6)
{cat(" \n")
cat("ERROR: Invalid model number in this version of PROCESS. \n")}
if (errcode[i,1]==7)
{cat(" \n")
cat("ERROR: Invalid model number. \n")}
if (errcode[i,1]==8)
{cat(" \n")
cat("ERROR: You must specify an M variable for this model. \n")}
if (errcode[i,1]==9)
{cat(" \n")
cat("ERROR: You have specified an M variable in a model that does not use it. \n")}
if (errcode[i,1]==10)
{cat(" \n")
cat("ERROR: You have specified a W variable in a model that does not use it. \n")}
if (errcode[i,1]==11)
{cat(" \n")
cat("ERROR: You have not specified a W variable in a model that requires it. \n")}
if (errcode[i,1]==12)
{cat(" \n")
cat("ERROR: You have specified a Z variable in a model that does not use it. \n")}
if (errcode[i,1]==13)
{cat(" \n")
cat("ERROR: You have not specified a Z variable in a model that requires it. \n")}
if (errcode[i,1]==15)
{cat(" \n")
cat("ERROR: One of your model variables exhibits no variation (it is a constant). \n")}
if (errcode[i,1]==16)
{cat(" \n")
cat("ERROR: BMATRIX is not the correct length or is otherwise invalid. \n")}
if (errcode[i,1]==17)
{cat(" \n")
cat("ERROR: WMATRIX is not the correct length or is otherwise invalid. \n")}
if (errcode[i,1]==18)
{cat(" \n")
cat("ERROR: ZMATRIX is not the correct length or is otherwise invalid. \n")}
if (errcode[i,1]==19)
{cat(" \n")
cat("ERROR: WZMATRIX is not the correct length or is otherwise invalid. \n")}
if (errcode[i,1]==20)
{cat(" \n")
cat("ERROR: A path fixed at zero cannot be moderated. \n")}
if (errcode[i,1]==60)
{cat(" \n")
cat("PROCESS is now ready for use.\n")
cat("Copyright 2021 by Andrew F. Hayes ALL RIGHTS RESERVED\n \n")}
if (errcode[i,1]==21)
{cat(" \n")
cat("ERROR: If only one moderator is specified, it must be specified as W. \n")}
if (errcode[i,1]==22)
{cat(" \n")
cat("ERROR: In BMATRIX, X must be specified to affect at least one variable. \n")}
if (errcode[i,1]==23)
{cat(" \n")
cat("ERROR: In BMATRIX, at least one variable must be specified to affect Y. \n")}
if (errcode[i,1]==24)
{cat(" \n")
cat("ERROR: You must specify a model number or a custom BMATRIX specification. \n")}
if (errcode[i,1]==25)
{cat(" \n")
cat("ERROR: BMATRIX cannot be used in conjunction with a model number. \n")}
if (errcode[i,1]==26)
{cat(" \n")
cat("ERROR: Your model has a dangling mediator (all Ms must affect and be affected). \n")}
if (errcode[i,1]==29)
{cat(" \n")
cat("ERROR: CMATRIX is not the correct length or is otherwise invalid. \n")}
if (errcode[i,1]==30)
{cat(" \n")
cat("ERROR: In CMATRIX, all covariates must be assigned to an M or a Y. \n")}
if ((errcode[i,1]==31) & (singlr==0))
{cat(" \n")
singlr<-1
cat("ERROR: A linear or near linear dependence (singularity) exists in the data. \n")}
if (errcode[i,1]==32)
{cat(" \n")
cat("ERROR: Models 80 and 81 require between 3 and 6 mediators. \n")}
if (errcode[i,1]==33)
{cat(" \n")
cat("ERROR: Model 82 requires 4 mediators. \n")}
if (errcode[i,1]==34)
{cat(" \n")
cat("ERROR: This model number requires between 2 and 6 mediators. \n")}
if (errcode[i,1]==35)
{cat(" \n")
cat("ERROR: In a model with only one moderator, that moderator must be W. \n")}
if (errcode[i,1]==36)
{cat(" \n")
cat("ERROR: A serial mediation model cannot have more than 6 mediators. \n")}
if (errcode[i,1]==37)
{cat(" \n")
cat("ERROR: No more than 10 mediators are allowed in a PROCESS command. \n")}
if (errcode[i,1]==38)
{cat(" \n")
cat("ERROR: XCATCODE is not provided, not the correct length, or is otherwise invalid. \n")}
if (errcode[i,1]==39)
{cat(" \n")
cat("ERROR: WCATCODE is not provided, not the correct length, or is otherwise invalid. \n")}
if (errcode[i,1]==40)
{cat(" \n")
cat("ERROR: ZCATCODE is not provided, not the correct length, or is otherwise invalid. \n")}
if (errcode[i,1]==41)
{cat(" \n")
cat("ERROR: Models 1, 2, and 3 cannot be customized. \n")}
if (errcode[i,1]==43)
{cat(" \n")
cat("ERROR: PROCESS does not allow dichotomous mediators. \n")}
if (errcode[i,1]==50)
{cat(" \n")
cat("ERROR: A multicategorical moderator cannot be specified as a covariate. \n")}
if (errcode[i,1]==51)
{cat(" \n")
cat("ERROR: A variable you specified as a covariate is a moderator in all equations. \n")}
if ((errcode[i,1]==52) & (mcerpt==0))
{mcerpt<-1
cat(" \n")
cat("ERROR: A variable specified as multicategorical must have at least three categories. \n")}
if (errcode[i,1]==53)
{cat(" \n")
cat("ERROR: Variables declared as factors are not accepted by PROCESS.\n")}
}
#if (saveboot==1)
#{resultm<-list(resultm,boots)}
#invisible(resultm)
resultms<-NULL
if ((saveboot==0) & (saveest==1)){resultms<-resultm}
if ((saveboot==1) & (saveest==0)){resultms<-boots}
if ((saveboot==1) & (saveest==1)){resultms<-(list(boots,resultm))}
invisible(resultms)
}
process(activate=1)
process (data = sim_data, y = "joint_outcome", x = "exp_cond", w ="em", model = 1)
id <- c(1:200)
exp_cond <- rep(c(0,1,0,1), each = 50)
em <- rep(c(0,1), each = 100)
joint_outcome <- c(rnorm(50, mean = 110, sd = 10), rnorm(50, mean = 130, sd = 10),
rnorm(50, mean = 120, sd = 10), rnorm(50, mean = 180, sd = 10)
)
sim_data <- data.frame(id, exp_cond, joint_outcome, em)
process (data = sim_data, y = "joint_outcome", x = "exp_cond", w ="em", model = 1)
id <- c(1:200)
#process does not accept factors
exp_cond <- rep(c(0,1,0,1), each = 50)
em <- rep(c(0,1), each = 100)
joint_outcome <- c(rnorm(50, mean = 110, sd = 10), rnorm(50, mean = 130, sd = 10),
rnorm(50, mean = 120, sd = 10), rnorm(50, mean = 180, sd = 10)
)
sim_data <- data.frame(id, exp_cond, joint_outcome, em)
process (data = sim_data, y = "joint_outcome", x = "exp_cond", w ="em", model = 1)
library(processx)
exp_cond <- rep(c(0,1,0,1), each = 50)
em <- rep(c(0,1), each = 100)
joint_outcome <- c(rnorm(50, mean = 110, sd = 10), rnorm(50, mean = 130, sd = 10),
rnorm(50, mean = 120, sd = 10), rnorm(50, mean = 180, sd = 10)
)
sim_data <- data.frame(id, exp_cond, joint_outcome, em)
process (data = sim_data, y = "joint_outcome", x = "exp_cond", w ="em", model = 1)
##always add 5 in this equation
exp_val_mario_gold <- (1+5)*(1/6) + (3+5)*(3/6) + (5+5)*(1/6) + (6+5)*(1/6)
var_mario_gold <- (1/6)*((1+5)-exp_val_mario_gold)^2 + (3/6)*((3+5)-exp_val_mario_gold)^2 +(1/6)*((5+5)-exp_val_mario_gold)^2+(1/6)*((6+5)-exp_val_mario_gold)^2
exp_val_mario_gold <- (1+5)*(1/6) + (3+5)*(3/6) + (5+5)*(1/6) + (6+5)*(1/6)
#also add 5
var_mario_gold <- (1/6)*((1+5)-exp_val_mario_gold)^2 + (3/6)*((3+5)-exp_val_mario_gold)^2 +(1/6)*((5+5)-exp_val_mario_gold)^2+(1/6)*((6+5)-exp_val_mario_gold)^2
##always add 5 in this equation
exp_val_mario_gold <- (1+5)*(1/6) + (3+5)*(3/6) + (5+5)*(1/6) + (6+5)*(1/6)
#also add 5
var_mario_gold <- (1/6)*((1+5)-exp_val_mario_gold)^2 + (3/6)*((3+5)-exp_val_mario_gold)^2 +(1/6)*((5+5)-exp_val_mario_gold)^2+(1/6)*((6+5)-exp_val_mario_gold)^2
sd_mario_gold <- sqrt(var_mario_gold)
data.frame(exp_val_mario_gold, var_mario_gold, sd_mario_gold)
#Mario
exp_val_mario <- 1*(1/6) + 3*(3/6) + 5*(1/6) + 6*(1/6)
var_mario <- (1/6)*(1-exp_val_mario)^2 + (3/6)*(3-exp_val_mario)^2 + (1/6)*(5-exp_val_mario)^2+(1/6)*(6-exp_val_mario)^2
sd_mario <- sqrt(var_mario)
data.frame(exp_val_mario, var_mario, sd_mario)
exp_val_mario_gold <- (1+5)*(1/6) + (3+5)*(3/6) + (5+5)*(1/6) + (6+5)*(1/6)
var_mario_gold <- (1/6)*((1+5)-exp_val_mario_gold)^2 + (3/6)*((3+5)-exp_val_mario_gold)^2 +(1/6)*((5+5)-exp_val_mario_gold)^2+(1/6)*((6+5)-exp_val_mario_gold)^2
sd_mario_gold <- sqrt(var_mario_gold)
exp_val_mario_ally <- 2*(1/12) + 4*(3/12) + 6*(1/12) + 7*(1/12) + 3*(1/12) + 5*(3/12) + 7*(1/12) + 8*(1/12)
var_mario_ally <- (1/12)*(2-exp_val_mario_ally)^2 + (3/12)*(4-exp_val_mario_ally)^2 + (1/12)*(6-exp_val_mario_ally)^2 + (1/12)*(7-exp_val_mario_ally)^2 + (1/12)*(3-exp_val_mario_ally)^2 + (3/12)*(5-exp_val_mario_ally)^2 + (1/12)*(7-exp_val_mario_ally)^2 + (1/12)*(8-exp_val_mario_ally)^2
sd_mario_ally <- sqrt(var_mario_ally)
data.frame(exp_val_mario_ally,var_mario_ally,sd_mario_ally)
#Mario
exp_val_mario <- 1*(1/6) + 3*(3/6) + 5*(1/6) + 6*(1/6)
var_mario <- (1/6)*(1-exp_val_mario)^2 + (3/6)*(3-exp_val_mario)^2 + (1/6)*(5-exp_val_mario)^2+(1/6)*(6-exp_val_mario)^2
sd_mario <- sqrt(var_mario)
data.frame(exp_val_mario, var_mario, sd_mario)
#Pom Pom
exp_val_pom <- 0*(1/6)+3*(4/6)+8*(1/6)
var_pom <- (4/6)*(3-exp_val_pom)^2 + (1/6)*(8-exp_val_pom)^2 + (1/6)*(0-exp_val_pom)^2
sd_pom <- sqrt(var_pom)
data.frame(exp_val_pom, var_pom, sd_pom)
#Koppa
exp_val_koppa <- 1*(2/6)+2*(1/6)+3*(2/6)+10*(1/6)
var_koppa <- (2/6)*(1-exp_val_koppa)^2+(1/6)*(2-exp_val_koppa)^2+(2/6)*(3-exp_val_koppa)^2+(1/6)*(10-exp_val_koppa)^2
sd_koppa <- sqrt(var_koppa)
data.frame(exp_val_koppa, var_koppa, sd_koppa)
exp_val_mario_gold <- (1+5)*(1/6) + (3+5)*(3/6) + (5+5)*(1/6) + (6+5)*(1/6)
var_mario_gold <- (1/6)*((1+5)-exp_val_mario_gold)^2 + (3/6)*((3+5)-exp_val_mario_gold)^2 +(1/6)*((5+5)-exp_val_mario_gold)^2+(1/6)*((6+5)-exp_val_mario_gold)^2
sd_mario_gold <- sqrt(var_mario_gold)
data.frame(exp_val_mario_gold, var_mario_gold, sd_mario_gold)
exp_val_mario_ally <- 2*(1/12) + 4*(3/12) + 6*(1/12) + 7*(1/12) + 3*(1/12) + 5*(3/12) + 7*(1/12) + 8*(1/12)
var_mario_ally <- (1/12)*(2-exp_val_mario_ally)^2 + (3/12)*(4-exp_val_mario_ally)^2 + (1/12)*(6-exp_val_mario_ally)^2 + (1/12)*(7-exp_val_mario_ally)^2 + (1/12)*(3-exp_val_mario_ally)^2 + (3/12)*(5-exp_val_mario_ally)^2 + (1/12)*(7-exp_val_mario_ally)^2 + (1/12)*(8-exp_val_mario_ally)^2
sd_mario_ally <- sqrt(var_mario_ally)
data.frame(exp_val_mario_ally,var_mario_ally,sd_mario_ally)
##with covariance algebra rules
exp_val_ally <- (1/2)*1 + (1/2)*2
exp_val_mario_ally <- exp_val_mario + exp_val_ally
sd_ally <- (1/2)*(1-exp_val_ally)^2 + (1/2)*(2-exp_val_ally)^2
exp_val_mario_ally <- 2*(1/12) + 4*(3/12) + 6*(1/12) + 7*(1/12) + 3*(1/12) + 5*(3/12) + 7*(1/12) + 8*(1/12)
var_mario_ally <- (1/12)*(2-exp_val_mario_ally)^2 + (3/12)*(4-exp_val_mario_ally)^2 + (1/12)*(6-exp_val_mario_ally)^2 + (1/12)*(7-exp_val_mario_ally)^2 + (1/12)*(3-exp_val_mario_ally)^2 + (3/12)*(5-exp_val_mario_ally)^2 + (1/12)*(7-exp_val_mario_ally)^2 + (1/12)*(8-exp_val_mario_ally)^2
sd_mario_ally <- sqrt(var_mario_ally)
var_ally <- (1/2)*(1-exp_val_ally)^2 + (1/2)*(2-exp_val_ally)^2
var_combined <- var_ally + var_mario
sqrt_combined <- sqrt(var_combined)
exp_val_mario_gold <- exp_val_mario + 5 #with using covariance algebra rules ()
#variances are the same
var_mario_gold <- var_mario
sd_mario_gold <- sd_mario
data.frame(exp_val_mario_gold, var_mario_gold, sd_mario_gold)
exp_val_ally <- (1/2)*1 + (1/2)*2
exp_val_mario_ally <- exp_val_mario + exp_val_ally
var_ally <- (1/2)*(1-exp_val_ally)^2 + (1/2)*(2-exp_val_ally)^2
var_combined <- var_ally + var_mario
sqrt_combined <- sqrt(var_combined)
#Mario
exp_val_mario <- 1*(1/6) + 3*(3/6) + 5*(1/6) + 6*(1/6)
var_mario <- (1/6)*(1-exp_val_mario)^2 + (3/6)*(3-exp_val_mario)^2 + (1/6)*(5-exp_val_mario)^2+(1/6)*(6-exp_val_mario)^2
sd_mario <- sqrt(var_mario)
data.frame(exp_val_mario, var_mario, sd_mario)
#Pom Pom
exp_val_pom <- 0*(1/6)+3*(4/6)+8*(1/6)
var_pom <- (4/6)*(3-exp_val_pom)^2 + (1/6)*(8-exp_val_pom)^2 + (1/6)*(0-exp_val_pom)^2
sd_pom <- sqrt(var_pom)
data.frame(exp_val_pom, var_pom, sd_pom)
#Koppa
exp_val_koppa <- 1*(2/6)+2*(1/6)+3*(2/6)+10*(1/6)
var_koppa <- (2/6)*(1-exp_val_koppa)^2+(1/6)*(2-exp_val_koppa)^2+(2/6)*(3-exp_val_koppa)^2+(1/6)*(10-exp_val_koppa)^2
sd_koppa <- sqrt(var_koppa)
data.frame(exp_val_koppa, var_koppa, sd_koppa)
exp_val_ally <- (1/2)*1 + (1/2)*2
exp_val_mario_ally <- exp_val_mario + exp_val_ally
var_ally <- (1/2)*(1-exp_val_ally)^2 + (1/2)*(2-exp_val_ally)^2
var_combined <- var_ally + var_mario
sd_combined <- sqrt(var_combined)
data.frame(exp_val_mario_ally, var_combined, )
exp_val_ally <- (1/2)*1 + (1/2)*2
exp_val_mario_ally <- exp_val_mario + exp_val_ally
var_ally <- (1/2)*(1-exp_val_ally)^2 + (1/2)*(2-exp_val_ally)^2
var_combined <- var_ally + var_mario
sd_combined <- sqrt(var_combined)
data.frame(exp_val_mario_ally, var_combined, sd_combined )
var_mario <- (1/6)*(1-exp_val_mario)^2 + (3/6)*(3-exp_val_mario)^2 + (1/6)*(5-exp_val_mario)^2+(1/6)*(6-exp_val_mario)^2
var_mario <- (1/6)*(1-exp_val_mario)^2 + (3/6)*(3-exp_val_mario)^2 + (1/6)*(5-exp_val_mario)^2+(1/6)*(6-exp_val_mario)^2
var_mario <- (1/6)*(1-exp_val_mario)^2 + (3/6)*(3-exp_val_mario)^2 + (1/6)*(5-exp_val_mario)^2+(1/6)*(6-exp_val_mario)^2
var_mario <- (1/6)*(1-exp_val_mario)^2 + (3/6)*(3-exp_val_mario)^2 +
(1/6)*(5-exp_val_mario)^2+(1/6)*(6-exp_val_mario)^2
var_koppa <- (2/6)*(1-exp_val_koppa)^2+(1/6)*(2-exp_val_koppa)^2+(2/6)*(3-exp_val_koppa)^2+
(1/6)*(10-exp_val_koppa)^2
RStudio.Version()
?aggregrate
`nrow`
?nrow
lambda <- matrix(c(0.3, 0,4, 0, 0, 0,
0,0,-0.2, 0.5, 0, 0,
0, 0, 0, 0, -0.3, 0.6
))
lambda
lambda <- matrix(c(0.3, 0,4, 0, 0, 0,
0,0,-0.2, 0.5, 0, 0,
0, 0, 0, 0, -0.3, 0.6
), nrow = 6)
lambda
lambda <- matrix(c(0.3, 0.4, 0, 0, 0,
0,0,-0.2, 0.5, 0, 0,
0, 0, 0, 0, -0.3, 0.6
), nrow = 6)
lambda
lambda <- matrix(c(0.3, 0.4, 0, 0, 0, 0
0,0,-0.2, 0.5, 0, 0,
lambda <- matrix(c(0.3, 0.4, 0, 0, 0, 0,
0,0,-0.2, 0.5, 0, 0,
0, 0, 0, 0, -0.3, 0.6
), nrow = 6)
lambda
beta <- matrix(c(0, 0.5, 0,
0, 0, 0.7,
0, 0, 0),
nrow = 3
)
beta
psi <- matrix(c(1, 0, 0,
0, 1, 0,
0, 0, 1),
nrow = 3)
psi
identity <- diag(3)
identity
theta <- matrix(c(0.4, 0, 0, 0, 0, 0,
0, 0.6, 0, 0, 0, 0,
0, 0, 0.5, 0, 0, 0,
0, 0, 0, 0.2, 0, 0,
0, 0, 0, 0, 0.4, 0,
0, 0, 0, 0, 0, 0.3),
nrow = 6)
theta
id <- diag(3)
lambda %*% solve(id-beta) %*% psi %*% solve(t(id-beta)) %*% t(lambda) + theta
lambda <- matrix(c(0.3, 0.4, 0, 0, 0, 0,
0,0,-0.2, 0.5, 0, 0,
0, 0, 0, 0, -0.3, 0.6
), nrow = 6)
beta <- matrix(c(0, 0.5, 0,
0, 0, 0.7,
0, 0, 0),
nrow = 3
)
psi <- matrix(c(1, 0, 0,
0, 1, 0,
0, 0, 1),
nrow = 3)
id <- diag(3)
theta <- matrix(c(0.4, 0, 0, 0, 0, 0,
0, 0.6, 0, 0, 0, 0,
0, 0, 0.5, 0, 0, 0,
0, 0, 0, 0.2, 0, 0,
0, 0, 0, 0, 0.4, 0,
0, 0, 0, 0, 0, 0.3),
nrow = 6)
lambda %*% solve(id-beta) %*% psi %*% solve(t(id-beta)) %*% t(lambda) + theta
setwd("/Users/lucas/Documents/Master/UvA/SEM II/Assignment 2")
covMat <- as.matrix(read.csv("houghton.csv"))
rownames(covMat) <- colnames(covMat)
View(covMat)
n <- 263
library(lavaan)
c_t =~ evaluation_beliefs + self_talk + mental_imagery
s_w =~ happy + mood1 + mood2
j_s =~ work1 + work2 + work3
d_t ~ c_t
s_w ~ d_t
j_s ~ d_t + s_w
model1 <- '
#latent variable definitions
c_t =~ evaluation_beliefs + self_talk + mental_imagery
s_w =~ happy + mood1 + mood2
d_t =~ perform1 + perform2 + approval
j_s =~ work1 + work2 + work3
#regressions
d_t ~ c_t
s_w ~ d_t
j_s ~ d_t + s_w
'
fit1 <- sem(model1, sample.cov = covMat, sample.nobs = n)
fitMeasures(fit1)
fit2 <- sem(model2, sample.cov = covMat, sample.nobs = n)
model2 <- '
#latent variable definitions
c_t =~ evaluation_beliefs*1 + self_talk + mental_imagery
s_w =~ happy*1 + mood1 + mood2
d_t =~ perform1*1 + perform2 + approval
j_s =~ work1 + work2*1 + work3
#regressions
d_t ~ c_t
s_w ~ d_t
j_s ~ d_t + s_w
'
fit2 <- sem(model2, sample.cov = covMat, sample.nobs = n)
model2 <- '
#latent variable definitions
c_t =~ evaluation_beliefs * 1 + self_talk + mental_imagery
s_w =~ happy * 1 + mood1 + mood2
d_t =~ perform1 * 1 + perform2 + approval
j_s =~ work1 + work2 * 1 + work3
#regressions
d_t ~ c_t
s_w ~ d_t
j_s ~ d_t + s_w
'
fit2 <- sem(model2, sample.cov = covMat, sample.nobs = n)
fitMeasures(fit1)
fit2 <- sem(model2, sample.cov = covMat, sample.nobs = n)
model2 <- '
#latent variable definitions
c_t =~ 1*evaluation_beliefs + self_talk + mental_imagery
s_w =~ 1*happy + mood1 + mood2
d_t =~ 1*perform1 + perform2 + approval
j_s =~ 1*work1 + work2 * 1 + work3
#regressions
d_t ~ c_t
s_w ~ d_t
j_s ~ d_t + s_w
'
fit2 <- sem(model2, sample.cov = covMat, sample.nobs = n)
model2 <- '
#latent variable definitions
c_t =~ 1*evaluation_beliefs + self_talk + mental_imagery
s_w =~ 1*happy + mood1 + mood2
d_t =~ 1*perform1 + perform2 + approval
j_s =~ 1*work1 + work2 + work3
#regressions
d_t ~ c_t
s_w ~ d_t
j_s ~ d_t + s_w
'
fit2 <- sem(model2, sample.cov = covMat, sample.nobs = n)
fitMeasures(fit1)
anova(fit1,fit1)
anova(fit1,fit2)
anova(fit1, fit2)
anova(fit1, fit2)
library(semPlot)
semPaths(fit1)
library(semPlot)
semPaths(fit1)
semPaths(fit1)
lambda <- matrix(c(0.3, 0.4, 0, 0, 0, 0,
0,0,-0.2, 0.5, 0, 0,
0, 0, 0, 0, -0.3, 0.6
), nrow = 6)
beta <- matrix(c(0, 0.5, 0,
0, 0, 0.7,
0, 0, 0),
nrow = 3
)
psi <- matrix(c(1, 0, 0,
0, 1, 0,
0, 0, 1),
nrow = 3)
id <- diag(3)
theta <- matrix(c(0.4, 0, 0, 0, 0, 0,
0, 0.6, 0, 0, 0, 0,
0, 0, 0.5, 0, 0, 0,
0, 0, 0, 0.2, 0, 0,
0, 0, 0, 0, 0.4, 0,
0, 0, 0, 0, 0, 0.3),
nrow = 6)
sigma <-  lambda %*% solve(id-beta) %*% psi %*% solve(t(id-beta)) %*% t(lambda) + theta
sigma
install.packages("httr")
install.packages("jsonlite")
#packages
library(httr)
library(jsonlite)
res = GET("https://api.open-notify.org/astros.json")
res = GET("https://api.open-notify.org/astros.json")
res = GET("https://api.open-notify.org/astros.json")
data <- GET("https://api.covidactnow.org/v2/county/06037.timeseries.json?apiKey=xyxyxy
")
data <- GET("https://api.covidactnow.org/v2/county/06037.timeseries.json?apiKey=xyxyxy")
devtools::create("airquality")
devtools::build("airquality")
setwd("/Users/lucas/Documents/Master/UvA/Programming Next Step/lucasproject")
devtools::build("airquality")
devtools::create("airquality")
devtools::build()
setwd("~/Documents/Master/UvA/Programming Next Step/lucasproject/airquality")
devtools::build()
usethis::use_mit_license()
devtools::build()
devtools::install()
airquality::test_function
devtools::build()
devtools::document()
devtools::install()
airquality::test_function()

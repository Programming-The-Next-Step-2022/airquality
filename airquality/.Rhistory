hist_aq_url_4,
current_time_unix_r,
hist_aq_url_5,
appid)
hist_aq_raw <- GET(hist_aq_url)
hist_aq_char <- rawToChar(hist_aq_raw$content)
hist_aq_dat <- fromJSON(hist_aq_char)
#converting to data frame
hist_aqi_df <- hist_aq_dat[['list']][['main']]
hist_comp_df <- hist_aq_dat[['list']][['components']]
#plotting
hist_comp_df$time <- seq(1:nrow(hist_comp_df))
hist_comp_df %>%
ggplot(aes(x = time, y = co)) +
geom_line()
}
history()
history_aq("Berlin", "GER")
history_aq("Mumbai", "IND")
history_aq("Berlin", "GER")
usethis::use_testthat()
usethis::use_test('airquality')
airquality::current_aq("Amsterdam", "NL")
airquality(234)
airquality::current_aq(13)
test <- data.frame(1,2,3)
mode(test)
is.data.frame(test)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::build()
devtools::load_all()
devtools::test()
devtools::test()
devtools::test()
library(airquality)
context('Core functions')
test_that('airquality returns two data frames', {
aq_call <- current_aq("Amsterdam", "NL")
expect_true(is.data.frame(df))
})
library(airquality)
context('Core functions')
test_that('airquality returns two data frames', {
aq_call <- current_aq("Amsterdam", "NL")
expect_true(is.data.frame(df))
})
current_aq <- function(city, country){
#geocoding
geocode_base <- 'http://api.openweathermap.org/geo/1.0/direct?q='
geocode_limit <- '&limit=1&appid='
geocode_appid <- '03782ca206139ca19d564d33c2813127'
geocode_url <- paste0(
geocode_base,
city,
",",
country,
geocode_limit,
geocode_appid
)
geocode_raw <- GET(geocode_url)
geocode_char <- rawToChar(geocode_raw$content)
geocode_dat <- fromJSON(geocode_char)
#print(geocode_dat[1 , c(3,4)])
#current airquality
base <- 'http://api.openweathermap.org/data/2.5/'
which <- 'air_pollution?'
lat <- 'lat='
lat_number <- geocode_dat[1,3]
lon <- '&lon='
lon_number <- geocode_dat[1,4]
appid <- '&appid=03782ca206139ca19d564d33c2813127'
url <- paste0(base,
which,
lat,
lat_number,
lon,
lon_number,
appid
)
current_aq_raw <- GET(url)
current_aq_char <- rawToChar(current_aq_raw$content)
current_aq <- fromJSON(current_aq_char)
#converting to data frame
current_aqi_df <- current_aq[['list']][['main']]
current_aq_comp_df <- current_aq[['list']][['components']]
return(current_aqi_df)
return(current_aq_comp_df)
}
current_aq("Amsterdam", "NL")
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
a <- list(1:10, letters)
str(a)
test_df <- current_aq("Amsterdam", "NL")
View(test_df)
current_aq("Amsterdam", "NL")
is.data.frame(test_df)
devtools::test()
current_aq("Amsterdam", "NL")
history_aq("Berlin", "GER")
devtools::build()
devtools::document(+)
devtools::document()
devtools::test()
devtools::test()
devtools::test()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::document()
devtools::build()
devtools::document()
devtools::document()
devtools::build()
devtools::document()
devtools::document()
devtools::build()
library(airquality)
library(airquality)
devtools::document()
library(airquality)
devtools::build()
devtools::document()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::document()
devtools::build()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::build()
devtools::document()
airquality::current_aq("Amsterdam", "NL")
library(airquality)
history_aq()
history_aq("Berlin", "GER")
devtools::document()
devtools::document()
# The Go-No Go Task
# ---------------
# Load libraries
# ---------------
#library(magick)
library(shiny)
# -----------------
# Create functions
# -----------------
# INPUT (probably): interval, n_trial, pin/id/person
interval <- 0.5
n_trial <- 20
id <- "Milla"
# Function to draw the screen
drawScreen <- function(txt, cex=1, col="black") {
plot(x=NA, y=NA, xlim=c(0,1), ylim=c(0,1), xaxt="n", yaxt="n", xlab="", ylab="")
text(x=0.5, y=0.5, labels=txt, cex=cex)
}
# Create stimuli
stim <- sample(x = c("A", "X"), replace = TRUE, size = n_trial)
# Create stimuli (random)
stim <- sample(x = c("A", "X"), replace = TRUE, size = n_trial)
# Create dataset
data <- data.frame(id = factor(rep(id, n_trial), levels = c(id)),
response = factor(rep("", n_trial), levels = c(" ", "none")),
correct = rep(100, n_trial),
SDT = factor(rep("", n_trial), levels = c("hit", "miss", "falsealarm", "correctrejection")),
rt = rep(100, n_trial),
stimulus = factor(stim, levels = c("A", "X")))
# Prints the response (spacebar press) and time it took to press it
# Two problems: the time resets every time you press any key besides spacebar,
# and function does not stop until it is pressed
rrt <- function(choiceKeys=c(" ")) {
dynamic_readline <- function() {
while (rstudioapi::isAvailable()) {
input <- rstudioapi::getConsoleEditorContext()$contents
if (input != "") {
rstudioapi::sendToConsole("", execute = FALSE)
return(input)
}
}
readline()
}
repeat {
rt <- system.time({
choice <- dynamic_readline()
})[3]
if (choice %in% choiceKeys) break
}
setNames(c(choice, rt), c("response", "rt"))
}
# Kind of fixed?
rrt <- function(choiceKeys=c(" ")) {
start_chunk_time <- Sys.time()
dynamic_readline <- function() {
# Create a counter variable that eventually breaks the loop
x <- 0
while (rstudioapi::isAvailable()) {
input <- rstudioapi::getConsoleEditorContext()$contents
# Add 1 to counter variable
x <- x + 1
if (input != "") {
rstudioapi::sendToConsole("", execute = FALSE)
return(input)
}
if (x == 2) {
return(NA)
}
}
readline()
}
o_rt <- Sys.time()
start_chunk_time <- o_rt - start_chunk_time
repeat {
rt <- system.time({
choice <- dynamic_readline()
})[3]
if (choice %in% choiceKeys){
o_rt <- Sys.time() - o_rt - start_chunk_time
break
}
elapsed_time <- Sys.time() - o_rt
if (elapsed_time > 5) {
o_rt <- NA
break
}
}
setNames(c(choice, rt, o_rt), c("response", "rt", "overall"))
}
# IGNORE: screens?
# Screen 1
plot(NA, NA, xlim=c(0,1), ylim=c(0,1), xaxt="n", yaxt="n", xlab="", ylab="")
text(x=0.5, y=0.5, labels="Welcome to the Go-No Go Task!", cex=1.5)
# Screen 2: separate function for this?
plot(NA, NA, xlim=c(0,1), ylim=c(0,1), xaxt="n", yaxt="n", xlab="", ylab="")
text(x=0.5, y=0.5, labels="Instructions: In this task, you will see two types of stimuli, the letter A and the\nletter X. When you see the letter A, you should respond as quickly as\npossible by pressing the space bar. When you see the letter X, you should\nnot respond (do not press any key). You should try to be as fast and accurate\nas possible.",
cex=0.8)
# Screen 3
plot(NA, NA, xlim=c(0,1), ylim=c(0,1), xaxt="n", yaxt="n", xlab="", ylab="")
text(x=0.5, y=0.5, labels="Press enter to start the task.", cex=1.5)
# Screen 4
plot(NA, NA, xlim=c(0,1), ylim=c(0,1), xaxt="n", yaxt="n", xlab="", ylab="")
text(x=0.5, y=0.5, labels="A", cex=3)
# Screen 5
plot(NA, NA, xlim=c(0,1), ylim=c(0,1), xaxt="n", yaxt="n", xlab="", ylab="")
text(x=0.5, y=0.5, labels="X", cex=3)
# Screen 6
plot(NA, NA, xlim=c(0,1), ylim=c(0,1), xaxt="n", yaxt="n", xlab="", ylab="")
text(x=0.5, y=0.5, labels="You finished the task. Thank you for participating!", cex=1)
# SIMULATION?
# -------------
# Load stimuli
# -------------
#A <- list(img = image_read("https://www.iconsdb.com/icons/download/blue/circle-256.jpg"),
#                name = "A")
# print(A)
#X <- list(img = image_read("https://www.iconsdb.com/icons/download/red/circle-256.jpg"),
#                 name = "X")
# print(X)
#stimuli <- list(go = A, nogo = X) # not sure if this is the best format
# -------------------------------------------------
# Create a while loop that is not interactive (yet)
# -------------------------------------------------
# Create an empty file that records ALL answers?
# Create an empty file that records answer given that round?
# Prespecify parameters
rounds <- 10
time <- .5 # not useful yet but we need to set the interval between rounds if no response is given
stimuli <- c("A", "X")
stimulus <- sample(x = stimuli, size = 1)
response <- sample(x = c("response", "noresponse"), size = 1)
rt <- sample(x = c(seq(from = 0, to = .5, by = .005), rep(1,100)), size = 1)
output_example <- data.frame(correct = rep(x = 0, times = rounds),
SDT = rep(x = 0, times = rounds),
rt = rep(x = 0, times = rounds),
stimulus = rep(x = 0, times = rounds))
for (round in 1:rounds) {
# Randomly assign stimulus shown for that round
# stimulus <- sample(x = stimuli, size = 1)
# Randomly assign response (THIS HAS TO BE PARTICIPANT'S RESPONSE / interactive)
# response <- sample(x = c("response", "noresponse"), size = 1)
# Randomly assign reaction time (THIS HAS TO BE PARTICIPANT'S RESPONSE TIME / interactive)
# rt <- sample(x = c(seq(from = 0, to = .5, by = .005), rep(1,100)), size = 1)
# rt = 1 here signifies no reaction; not sure if the response variable is necessary?
if (stimulus == "A" && rt <= .5) {
# Store output
output_example$correct[round] <- 1
output_example$SDT[round] <- "hit"
output_example$rt[round] <- rt
output_example$stimulus[round] <- "go"
# Assign new round (not necessary when I figure out the actual interactive bit)
stimulus <- sample(x = stimuli, size = 1)
rt <- sample(x = c(seq(from = 0, to = .5, by = .005), rep(1,100)), size = 1)
# round <- round + 1
} else if (stimulus == "A" && rt > .5) {
# Store output
output_example$correct[round] <- 0
output_example$SDT[round] <- "miss"
output_example$rt[round] <- rt
output_example$stimulus[round] <- "go"
# Assign new round (not necessary when I figure out the actual interactive bit)
stimulus <- sample(x = stimuli, size = 1)
rt <- sample(x = c(seq(from = 0, to = .5, by = .005), rep(1,100)), size = 1)
# round <- round + 1
} else if (stimulus == "X" && rt <= .5) {
# Store output
output_example$correct[round] <- 0
output_example$SDT[round] <- "falsealarm"
output_example$rt[round] <- rt
output_example$stimulus[round] <- "nogo"
# Assign new round (not necessary when I figure out the actual interactive bit)
stimulus <- sample(x = stimuli, size = 1)
rt <- sample(x = c(seq(from = 0, to = .5, by = .005), rep(1,100)), size = 1)
# round <- round + 1
} else if (stimulus == "X" && rt > .5) {
# Store output
output_example$correct[round] <- 1
output_example$SDT[round] <- "correctrejection"
output_example$rt[round] <- rt
output_example$stimulus[round] <- "nogo"
# Assign new round (not necessary when I figure out the actual interactive bit)
stimulus <- sample(x = stimuli, size = 1)
rt <- sample(x = c(seq(from = 0, to = .5, by = .005), rep(1,100)), size = 1)
# round <- round + 1
}
# End of the loop
# print(output_example)
}
print(output_example)
# Screen 6
plot(NA, NA, xlim=c(0,1), ylim=c(0,1), xaxt="n", yaxt="n", xlab="", ylab="")
text(x=0.5, y=0.5, labels="You finished the task. Thank you for participating!", cex=1)
setwd("/Users/lucas/Documents/Master/UvA/Research Internship/Data Analysis")
data <- read.csv("creativity_neg_control_chat_history_May+23%2C+2022_03.54")
data <- read.csv("creativity_neg_control_chat_history_May+23%2C+2022_03.54.csv")
View(data)
library(airquality)
varnames(data)
library(dplyr)
view(data)
library(tidyverse)
view(data)
view(data)
str(data)
colnames(data)
setwd("/Users/lucas/Documents/Master/UvA/Research Internship/Data Analysis")
data <- read.csv("creativity_neg_control_chat_history_May+23%2C+2022_03.54.csv")
colnames(data)
setwd("/Users/lucas/Documents/Master/UvA/Research Internship/Data Analysis")
data <- read.csv("creativity_neg_control_chat_history_May+23%2C+2022_03.54.csv")
colnames(data)
setwd("/Users/lucas/Documents/Master/UvA/Research Internship/Data Analysis")
data <- read.csv("creativity_neg_control_chat_history_May+23%2C+2022_03.54.csv")
colnames(data)
setwd("/Users/lucas/Documents/Master/UvA/Research Internship/Data Analysis")
data <- read.csv("creativity_neg_control_chat_history_May+23%2C+2022_03.54.csv")
colnames(data)
setwd("/Users/lucas/Documents/Master/UvA/Research Internship/Data Analysis")
data <- read.csv2("creativity_neg_control_chat_history_May+23%2C+2022_03.54.csv")
colnames(data)
View(data)
setwd("/Users/lucas/Documents/Master/UvA/Research Internship/Data Analysis")
data <- read.csv("creativity_neg_control_chat_history_May+23%2C+2022_03.54.csv")
colnames(data)
?read.csv
setwd("/Users/lucas/Documents/Master/UvA/Research Internship/Data Analysis")
data <- read.csv("creativity_neg_control_chat_history_May+23%2C+2022_03.54.csv", header = TRUE)
colnames(data)
View(data)
setwd("/Users/lucas/Documents/Master/UvA/Research Internship/Data Analysis")
data <- read.csv("creativity_neg_control_chat_history_May+23%2C+2022_03.54.csv", header = FALSE)
colnames(data)
View(data)
setwd("/Users/lucas/Documents/Master/UvA/Research Internship/Data Analysis")
data <- read.csv("creativity_neg_control_chat_history_May+23%2C+2022_03.54.csv", header = TRUE)
colnames(data)
View(data)
setwd("/Users/lucas/Documents/Master/UvA/Research Internship/Data Analysis")
data <- read.csv("creativity_neg_control_chat_history_May+23%2C+2022_03.54.csv", header = TRUE, check.names = FALSE)
colnames(data)
setwd("/Users/lucas/Documents/Master/UvA/Research Internship/Data Analysis")
data <- read.csv("creativity_neg_control_chat_history_May+23%2C+2022_03.54.csv", header = TRUE, check.names = TRUE)
colnames(data)
setwd("/Users/lucas/Documents/Master/UvA/Research Internship/Data Analysis")
data <- read.csv("creativity_neg_control_chat_history_May+23%2C+2022_03.54.csv", header = TRUE, check.names = FALSE)
colnames(data)
View(data)
setwd("/Users/lucas/Documents/Master/UvA/Research Internship/Data Analysis")
data <- read.csv("creativity_neg_control_chat_history_May+23%2C+2022_03.54.csv", header = TRUE, check.names = FALSE)
colnames(data)
data %>%
filter(!row_number(2))
setwd("/Users/lucas/Documents/Master/UvA/Research Internship/Data Analysis")
data <- read.csv("creativity_neg_control_chat_history_May+23%2C+2022_03.54.csv", header = TRUE, check.names = TRUE)
colnames(data)
data %>%
filter(!row_number(2))
setwd("/Users/lucas/Documents/Master/UvA/Research Internship/Data Analysis")
data <- read.csv("creativity_neg_control_chat_history_May+23%2C+2022_03.54.csv", header = TRUE, check.names = TRUE)
colnames(data)
new <- data %>%
filter(!row_number(2))
View(new)
setwd("/Users/lucas/Documents/Master/UvA/Research Internship/Data Analysis")
data <- read.csv("creativity_neg_control_chat_history_May+23%2C+2022_03.54.csv", header = TRUE, check.names = TRUE)
colnames(data)
new <- data %>%
filter(!row_number() %in% c(2))
View(new)
setwd("/Users/lucas/Documents/Master/UvA/Research Internship/Data Analysis")
data <- read.csv("creativity_neg_control_chat_history_May+23%2C+2022_03.54.csv", header = TRUE, check.names = TRUE)
colnames(data)
new <- data %>%
slice(-2)
setwd("/Users/lucas/Documents/Master/UvA/Research Internship/Data Analysis")
data <- read.csv("creativity_neg_control_chat_history_May+23%2C+2022_03.54.csv", header = TRUE, check.names = TRUE)
colnames(data)
new <- data %>%
slice(-2)
View(new)
setwd("/Users/lucas/Documents/Master/UvA/Research Internship/Data Analysis")
data <- read.csv("creativity_neg_control_chat_history_May+23%2C+2022_03.54.csv", header = TRUE, check.names = TRUE)
colnames(data)
new <- data %>%
slice(-c(1,2)
setwd("/Users/lucas/Documents/Master/UvA/Research Internship/Data Analysis")
data <- read.csv("creativity_neg_control_chat_history_May+23%2C+2022_03.54.csv", header = TRUE, check.names = TRUE)
colnames(data)
new <- data %>%
slice(-c(1,2))
current_aq_list <- function(city, country){
coordinates <- geocoding(city, country)
#current airquality
base <- 'http://api.openweathermap.org/data/2.5/'
which <- 'air_pollution?'
lat <- 'lat='
lat_number <- coordinates[1,3]
lon <- '&lon='
lon_number <- coordinates[1,4]
appid <- '&appid=03782ca206139ca19d564d33c2813127'
url <- paste0(base,
which,
lat,
lat_number,
lon,
lon_number,
appid
)
current_aq_raw <- GET(url)
current_aq_char <- rawToChar(current_aq_raw$content)
current_aq <- fromJSON(current_aq_char)
return(current_aq)
}
current_aq_list("Amsterdam", "NL")
geocoding <- function(city, country){
geocode_base <- 'http://api.openweathermap.org/geo/1.0/direct?q='
geocode_limit <- '&limit=1&appid='
geocode_appid <- '03782ca206139ca19d564d33c2813127'
geocode_url <- paste0(
geocode_base,
city,
",",
country,
geocode_limit,
geocode_appid
)
geocode_raw <- GET(geocode_url)
geocode_char <- rawToChar(geocode_raw$content)
return(geocode_dat <- fromJSON(geocode_char))
}
current_aq_list("Amsterdam", "NL")
library(httr)
library(jsonlite)
library(ggplot2)
library(dplyr)
library(lubridate)
current_aq_list("Amsterdam", "NL")
devtools::document()
devtools::document()
library(airquality)
airquality::plot_comp_hist("Amsterdam", "NL", "co")
airquality::current_aq_list("Amsterdam", "NL")
